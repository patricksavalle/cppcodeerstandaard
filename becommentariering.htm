<html>
<head>
<title>
	Regel: becommentariëring
</title>
<link rel="stylesheet" type="text/css" href="codingstandard.css">
</head>
<body>
<script language="javascript">
if (self==parent)
{
  document.write('<META HTTP-EQUIV="refresh" CONTENT="0; URL=index.htm?becommentariering.htm">')
}
</script>
<hr>

<p>
<strong>
	Codeerstandaard voor C++
</strong>
</p>

<hr>

<a name="regel_becommentariering">
<h1>
	Regel: becommentariëring
</h1>
</a>
    
<blockquote>
<em>
  Gebruik zo min mogelijk commentaar. 
  Maak de code zelfdocumenterend door gebruik van duidelijke 
  namen en eenvoudige constructies.
</em>
</blockquote>

<p>
<em>
  Zie ook: 'Effective C++', item 4
</em>
</p>

<p>
  Dit is waarschijnlijk in strijd met de meeste andere standaards, 
  maar feitelijk moet het mogelijk zijn om de code op elk niveau 
  van abstractie zelfdocumenterend te maken en op pseudocode te 
  laten lijken. De juiste keuze van namen en eenvoudige code kan hierbij helpen. 
  Veel commentaar maakt code druk en vaak wordt het commentaar niet goed 
  onderhouden. 
</p>

<p>
  Voorzie niet-triviale constructies natuurlijk wel van commentaar. 
</p>

<hr>

<p>
	Uit "Van UML naar C++", Academic Service, ISBN 90 395 1279 5
</p>

<hr>

</body>
</html>