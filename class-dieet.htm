<html>
<head>
<title>
  Regel: class-dieet
</title>
<link rel="stylesheet" type="text/css" href="codingstandard.css">
</head>
<body>
<script language="javascript">
if (self==parent)
{
  document.write('<META HTTP-EQUIV="refresh" CONTENT="0; URL=index.htm?class-dieet.htm">')
}
</script>
<hr>
<p>
<strong>
	Codeerstandaard voor C++
</strong>
</p>
<hr>

<a name="Regel_class_dieet">
<h1>
  Regel: class-dieet
</h1>
</a>
    
<blockquote>
<em>
  Alle member-functies van een class die niet afhankelijk zijn van de toestand van 
  het object (dus geen gebruik maken van de "this"-pointer) en ook geen deel uitmaken 
  van de publieke of protected interface van de class, moeten static binnen het 
  definitiebestand worden gedeclareerd.
</em>
</blockquote>

<p>
  Functies die niet van de this-pointer gebruik maken (dus 
  geen niet-static member-variabelen of member-functies van de class gebruiken) 
  zijn eigenlijk geen member-functies en kunnen dus beter als 
  normale static-functies worden gemaakt, omdat dit de fysieke 
  interface van de class reduceert. 
  Het onderstaande voorbeeld toont een class met een functie die geen 
  gebruik maakt van de this-pointer.
</p>
<p>
(someclass.h)
</p>
<pre>  #ifndef SOMECLASS_H
  #define SOMECLASS_H

  class SomeClass
  {
  public:
    // bla bla 

    void Operation();

    // bla bla

  private:
    void ShowMessage();
  };

  #endif
</pre>
<p>
  (someclass.cpp)
</p>
<pre>
  #ifndef   SOMECLASS_H
  #include "someclass.h"
  #define   SOMECLASS_H
  #endif

  #ifndef   IOSTREAM
  #include <iostream>
  #define   IOSTREAM
  #endif

  void SomeClass::Operation()
  {
    //  bla bla

    ShowMessage();

    // bla bla
  }

  void SomeClass::ShowMessage()
  {
    cout << "the message" << endl;
  }
</pre>
<p>
  Deze class kan beter als volgt worden gemaakt:
</p>
<p>
  (someclass.h)
</p>
<pre>  #ifndef SOMECLASS_H
  #define SOMECLASS_H

  class SomeClass
  {
  public:
    // bla bla 

    void Operation();

    // bla bla
  };

  #endif
</pre>
<p>
  (someclass.cpp)
</p>
<pre>  #ifndef   SOMECLASS_H
  #include "someclass.h"
  #define   SOMECLASS_H
  #endif

  #ifndef   IOSTREAM
  #include &lt;iostream&gt;
  #define   IOSTREAM
  #endif

  static void ShowMessage();

  void SomeClass::Operation()
  {
    //  bla bla

    ShowMessage();

    // bla bla
  }

  static void ShowMessage()
  {
    cout << "the message" << endl;
  }
</pre>

<hr>

<p>
	Uit "Van UML naar C++", Academic Service, ISBN 90 395 1279 5
</p>

<hr>

</body>
</html>