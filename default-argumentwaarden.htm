<html>
<head>
<title>
  Regel: default-argumentwaarden
</title>
<link rel="stylesheet" type="text/css" href="codingstandard.css">
</head>
<body>
<script language="javascript">
if (self==parent)
{
  document.write('<META HTTP-EQUIV="refresh" CONTENT="0; URL=index.htm?default-argumentwaarden.htm">')
}
</script>
<hr>
<p>
<strong>
	Codeerstandaard voor C++
</strong>
</p>
<hr>

<a name="regel_default-argumentwaarden">
<h1>
  Regel: default-argumentwaarden
</h1>
</a>
    
<blockquote>
<em>
  Plaats default-argumentwaarden nooit direct in een declaratie maar verberg 
  ze achter functies of constanten, dat verbetert de insulatie van de betreffende class.
</em>
</blockquote>

<p>
  Default-argumentwaarden zijn meestal implementatieafhankelijk en horen daarom 
  eigenlijk niet in een interface thuis. Als een verandering van implementatie 
  namelijk betekent dat de default-argumentwaarden ook moeten veranderen, houdt 
  dat ook in dat clients die wijziging 'zien'. Om dat te voorkomen kunnen 
  default-argumentwaarden het beste worden 'verborgen' achter een functie of 
  een constante. Het onderstaande voorbeeld toont dit:
</p>

<pre>  class SomeClass
  {
  public:
    void SomeOperation( int arg = DEFAULTVALUE );

    static const int DEFAULTVALUE;
  };
</pre>

<p>
  Ook mogelijk en nog flexibeler is de volgende constructie:
</p>

<pre>  class SomeClass
  {
  public:
    void SomeOperation( int arg = GetDefaultValue() );

    static int GetDefaultValue();
    static void SetDefaultValue( int arg );
  };
</pre>

<p>
  In beide gevallen kan de default-argumentwaarde worden veranderd zonder de interface te veranderen.
</p>

<hr>

<p>
	Uit "Van UML naar C++", Academic Service, ISBN 90 395 1279 5
</p>

<hr>

</body>
</html>