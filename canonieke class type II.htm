<html>
<head>
<title>
  Regel: canonieke class type II
</title>
<link rel="stylesheet" type="text/css" href="codingstandard.css">
</head>
<body>
<script language="javascript">
if (self==parent)
{
  document.write('<META HTTP-EQUIV="refresh" CONTENT="0; URL=index.htm?canonieke class type II.htm">')
}
</script>
<hr>
<p>
<strong>
	Codeerstandaard voor C++
</strong>
</p>
<hr>

<h1>
  Regel: canonieke class type II
</h1>
</a>
    
<blockquote>
<em>
  Als er in een class (niet-statische) value-member-variabelen zijn 
  opgenomen, krijgt deze in ieder geval een default-constructor.
</em>
</blockquote>

<br>

<p>
  Omdat ook 'Regel: canonieke class type I' van toepassing is op 
  deze class, ziet deze 'canonieke' class er dus als volgt uit:
</p>
<pre>
  class CanoniekeClass
  {
  public:
    CanoniekeClass();
    virtual ~CanoniekeClass();
  private:
    // value-attributen
  };
</pre>
<p>
  De andere canonieke members hoeven in dit geval niet worden gemaakt 
  omdat de compiler voor deze members (de copy-constructor en de 
  operator=) correcte defaults kan genereren. 
  De door de compiler gegenereerde default-constructor is fout omdat 
  deze de member-variabelen niet initialiseert; de door de compiler 
  gegenereerde default-destructor is fout omdat deze niet virtueel is.
</p>

<hr>

<p>
	Uit "Van UML naar C++", Academic Service, ISBN 90 395 1279 5
</p>

<hr>

</body>
</html>

