<html>
<head>
<title>
  Regel: function-hiding
</title>
<link rel="stylesheet" type="text/css" href="codingstandard.css">
</head>
<body>
<script language="javascript">
if (self==parent)
{
  document.write('<META HTTP-EQUIV="refresh" CONTENT="0; URL=index.htm?function-hiding.htm">')
}
</script>
<hr>
<p>
<strong>
	Codeerstandaard voor C++
</strong>
</p>
<hr>

<a name="regel_function-hiding">
<h1>
  Regel: function-hiding
</h1>
</a>
    
<blockquote>
<em>
  Vermijd function-hiding.
</em>
</blockquote>

<p>
<em>
  Zie ook: 'Effective C++', item 37
</em>
</p>

<p>
<em>
  Zie ook: 'Large Scale C++ Software Design', par. 9.1.4
</em>
</p>

<p>
  Function-hiding is meestal fout en altijd verwarrend, zoals het onderstaande voorbeeld toont:
</p>

<pre>  class BaseClass
  {
  public:
    void SomeFunction();
  };

  class DerivedClass : public BaseClass
  {
  public:
    // function hides function in BaseClass
    void SomeFunction();
  }; 

  void test()
  {
    // let op! Slecht één object creëren...
    DerivedClass	x;
    BaseClass* B = &x;
    DerivedClass* D = &x;

    // nu de twee verschillende functies aanroepen in 
    // zelfde object zonder expliciete syntax !!!
    B->SomeFunction();  // BaseClass::SomeFunction() !!!
    D->SomeFunction();  // DerivedClass::SomeFunction() !!!
  }
</pre>

<hr>

<p>
	Uit "Van UML naar C++", Academic Service, ISBN 90 395 1279 5
</p>

<hr>

</body>
</html>